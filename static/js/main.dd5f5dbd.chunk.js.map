{"version":3,"sources":["services/helper.service.js","services/config.service.js","components/map-container/mapContainer.conponent.js","services/httpHelper.service.js","services/models/vesselTrack.model.js","services/dtos/vesselTrack.dto.model.js","components/search-box/searchBox.component.js","components/vessel-info-card/vesselInfoCard.component.js","components/animation-controlls/animationControlls.component.js","components/lineaar-loader/linearLoader.component.js","components/navigator-card/navigatorCard.component.js","pages/main/main.page.js","services/httpActions.service.js","App.js","serviceWorker.js","index.js"],"names":["Number","prototype","toRadians","this","Math","PI","toDegrees","R","getPositionBetween","pos1","pos2","persentage","d","lat1","lon1","lat2","lon2","φ1","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","getDistance","brng","y","x","getBearing","lat","lon","distance","bearing","λ1","asin","λ2","getLatLonFromPointDistBearing","API_ROOT","API_ENDPOINTS","API_KEYS","ANIMATION_STAUSES","INITIAL","PLAY","PAUSE","REPLAY","MapContainer","animationPlaying","data","state","loading","error","errorMessage","showVesselMarker","showVesselTrackMarkers","vessel","vesselCurrentTrack","vesselTracks","clusteringPositions","mapPosition","zoom","bounds","nextProps","trackData","length","animationStatus","initStateData","intervalId","clearInterval","animate","response","maxBounds","max","map","track","minBounds","min","endPosition","pop","setState","clusterProgress","tarckId","push","setInterval","trackStart","trackEnd","currentPosition","timestamp","speed","Popup","Marker","position","renderPopup","key","CircleMarker","center","radius","positions","newPositions","Polyline","color","Fragment","Map","duration","easeLinearity","TileLayer","attribution","url","renderVesselInfo","renderVesselTrackCluster","renderVesseTrack","Component","getParamsAsString","params","Object","keys","value","join","genericHttpCall","apiEndpoint","apiKey","fetchOpt","fetchUrl","console","log","fetch","then","json","catch","errors","VesselTrackModel","MMSI","STATUS","SPEED","LON","LAT","COURSE","HEADING","TIMESTAMP","SHIP_ID","mmsi","parseInt","status","parseFloat","course","heading","shipId","date","Date","DELAY","SearchBox","searchQuery","handleSubmit","e","preventDefault","clearTimeout","timer","notifyOnQueryChange","handleOnChange","target","setTimeout","props","onQueryChange","onSubmit","className","autoComplete","placeholder","onChange","type","id","VesselInfoCard","AnimationControlls","statusPlaying","playClicked","onPlayClick","renderPauseReplay","onPauseClick","onReplayClick","onClick","src","alt","LinearLoader","NavigatroCard","serverError","serverMessage","renderErrorMessage","onSearchQueryChange","MainPage","handleOnQueryChange","query","isNaN","fetchVesselData","handlePauseClick","handlePlayClick","handleReplayClick","v","period","days","protocol","vtrack","exportVesselTrack","detail","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd5f5dbd.chunk.js","sourcesContent":["/**\n * \n * Math calculation functions source: http://www.movable-type.co.uk/scripts/latlong.html \n * \n */\n\n// Add toRadians on number prototype\nif (typeof (Number.prototype.toRadians) === \"undefined\") {\n    Number.prototype.toRadians = function () {\n        return this * Math.PI / 180;\n    }\n}\n\n// Add toDegrees on number prototype\nif (typeof (Number.prototype.toDegrees) === \"undefined\") {\n    Number.prototype.toDegrees = function () {\n        return this * (180 / Math.PI);\n    }\n}\n\nconst R = 6371e3; // metres\n\n\n/**\n * @param {*} lat1 \n * @param {*} lon1 \n * @param {*} lat2 \n * @param {*} lon2 \n */\nexport const getDistance = (lat1, lon1, lat2, lon2) => {\n\n    const φ1 = lat1.toRadians();\n    const φ2 = lat2.toRadians();\n    const Δφ = (lat2 - lat1).toRadians();\n    const Δλ = (lon2 - lon1).toRadians();\n\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n        Math.cos(φ1) * Math.cos(φ2) *\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    const d = R * c;\n\n    return d;\n}\n\n/**\n * \n * @param {*} lat1 \n * @param {*} lon1 \n * @param {*} lat2 \n * @param {*} lon2 \n */\nexport const getBearing = (lat1, lon1, lat2, lon2) => {\n    const φ1 = lat1.toRadians();\n    const φ2 = lat2.toRadians();\n    const Δλ = (lon2 - lon1).toRadians();\n\n    const y = Math.sin(Δλ) * Math.cos(φ2);\n    const x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);\n    const brng = Math.atan2(y, x);\n\n    return brng.toDegrees();\n}\n\n/**\n * \n * @param {*} lat \n * @param {*} lon \n * @param {*} distance \n * @param {*} bearing \n */\nexport const getLatLonFromPointDistBearing = (lat, lon, distance, bearing) => {\n\n    const φ1 = lat.toRadians();\n    const λ1 = lon.toRadians();\n    const d = distance;\n    const brng = bearing.toRadians();\n\n    const φ2 = Math.asin(Math.sin(φ1) * Math.cos(d / R) +\n        Math.cos(φ1) * Math.sin(d / R) * Math.cos(brng));\n    let λ2 = λ1 + Math.atan2(Math.sin(brng) * Math.sin(d / R) * Math.cos(φ1),\n        Math.cos(d / R) - Math.sin(φ1) * Math.sin(φ2));\n\n    return [φ2.toDegrees(), λ2.toDegrees()];\n}\n\n/**\n * \n * @param {*} pos1 [lat, lon]\n * @param {*} pos2 [lat, lon]\n * @param {*} persentage  (float 0 - 1 )\n */\nexport const getPositionBetween = (pos1, pos2, persentage) => {\n    const d = getDistance(pos1[0], pos1[1], pos2[0], pos2[1]);\n    const brng = getBearing(pos1[0], pos1[1], pos2[0], pos2[1]);\n    return getLatLonFromPointDistBearing(pos1[0], pos1[1], d * persentage, brng)\n}","/**\n * Application configurations \n */\n\nexport const USE_MOCK_DATA = true;\n\nexport const API_ROOT = 'https://services.marinetraffic.com/api';\n\nexport const API_ENDPOINTS = {\n    EXPORT_VESSEL_TRACK: 'exportvesseltrack',\n    SHIP_SHEARCH: 'shipsearch'\n}\n\nexport const API_KEYS = {\n    PS01: '86851603dd8eb2766a7e164bf79fbddeaea5014d',\n    VD03: ''\n}\n\nexport const ANIMATION_STAUSES = {\n    INITIAL: 0,\n    PLAY: 1,\n    PAUSE: 2, \n    REPLAY: 3\n}","\nimport React, { Component } from 'react';\nimport './mapContainer.component.style.scss';\nimport { Map, TileLayer, Marker, Popup, CircleMarker, Polyline } from 'react-leaflet';\nimport { getPositionBetween } from '../../services/helper.service';\nimport { ANIMATION_STAUSES } from '../../services/config.service';\n\nconst CLUSTER_STEP = 0.01;\nconst FRAMES_PER_SECOND = 32;\n\n\nexport default class MapContainer extends Component {\n\n    intervalId;\n    animationPlaying = false;\n    data = null;\n\n    state = {\n        loading: false,\n        error: false,\n        errorMessage: \"\",\n        showVesselMarker: false,\n        showVesselTrackMarkers: false,\n        vessel: null,\n        vesselCurrentTrack: null,\n        vesselTracks: [],\n        clusteringPositions: [],\n        mapPosition: [37.946163, 23.629808],\n        zoom: 10,\n        bounds: null\n    }\n\n    /**\n     * \n     * @param {*} nextProps \n     */\n    componentWillReceiveProps(nextProps) {\n        // Check mmsi update \n        if (nextProps.trackData\n            && nextProps.trackData.length > 0) {\n\n            // Handle init\n            if (nextProps.animationStatus === ANIMATION_STAUSES.INITIAL) {\n                // Init trackdata\n                this.data = nextProps.trackData;\n                this.initStateData(nextProps.trackData)\n                if (this.intervalId) {\n                    clearInterval(this.intervalId);\n                    this.intervalId = null;\n                }\n            }\n\n            // Handle Play\n            if (nextProps.animationStatus === ANIMATION_STAUSES.PLAY) {\n                this.animationPlaying = true;\n                if (!this.intervalId) {\n                    this.animate()\n                }\n            }\n\n            // Handle Pause\n            if (nextProps.animationStatus === ANIMATION_STAUSES.PAUSE) {\n                this.animationPlaying = false;\n            }\n\n            // Handle replay\n            if (nextProps.animationStatus === ANIMATION_STAUSES.REPLAY) {\n                this.initStateData(nextProps.trackData);\n                this.animationPlaying = true;\n                if (this.intervalId) {\n                    clearInterval(this.intervalId)\n                }\n                this.animate();\n            }\n        }\n    }\n\n    /**\n     * Initate response data\n     * @param {*} response \n     */\n    initStateData(response) {\n\n        if (this.intervalId) {\n            clearInterval(this.intervalId)\n        }\n\n        // find max lat , max lon, min lat, min lon\n        const maxBounds = [\n            Math.max(...response.map(track => track.lat)),\n            Math.max(...response.map(track => track.lon)),\n        ]\n        const minBounds = [\n            Math.min(...response.map(track => track.lat)),\n            Math.min(...response.map(track => track.lon)),\n        ]\n\n        const endPosition = [...response].pop();\n\n        this.setState({\n            vessel: { track: endPosition },\n            showVesselMarker: true,\n            clusteringPositions: [],\n            loading: false,\n            bounds: [maxBounds, minBounds],\n            vesselCurrentTrack: null,\n            vesselTracks: [],\n            showVesselTrackMarkers: true\n        });\n    }\n\n    /**\n     * Basic animation engine\n     */\n    animate() {\n\n        let clusterProgress = 0;\n        let tarckId = 0;\n        const { clusteringPositions, vesselTracks } = this.state;\n        const data = this.data;\n        // Add first track to show\n        vesselTracks.push(data[tarckId])\n\n        // Animation engine\n        this.intervalId = setInterval(() => {\n\n            if (!this.animationPlaying) {\n                return;\n            }\n\n            // Track steps has finished \n            if (tarckId >= data.length - 1) {\n                // Should stop animation\n                clearInterval(this.intervalId)\n                this.setState({\n                    vesselCurrentTrack: null\n                })\n                return;\n            }\n\n            // Cluster Progress has finished this step\n            if (clusterProgress >= 1) {\n                tarckId++;\n                vesselTracks.push(data[tarckId])\n                clusterProgress = 0;\n                return;\n            }\n\n            const trackStart = data[tarckId].mapPosition;\n            const trackEnd = data[tarckId + 1].mapPosition;\n            // Get pont of animated cluster point (percentage of destination) \n            const currentPosition = getPositionBetween(trackStart, trackEnd, clusterProgress);\n            // Add cluster position to clusters polyline\n            clusteringPositions.push(currentPosition);\n            this.setState({\n                vesselCurrentTrack: currentPosition,\n                clusteringPositions,\n                vesselTracks: [...vesselTracks],\n                showVesselTrackMarkers: true\n            })\n            // Increase cluster progress\n            clusterProgress += CLUSTER_STEP;\n\n        }, FRAMES_PER_SECOND)\n\n    }\n\n    /**\n     * \n     * @param {*} track \n     */\n    renderPopup(track) {\n        const { timestamp, speed } = track;\n        return (\n            <Popup>\n                Date: {timestamp} <br />\n                Speed: {speed}Knts\n            </Popup>\n        )\n    }\n\n    /**\n     * \n     * @param {*} vessel \n     */\n    renderVesselInfo(vessel) {\n        return (<Marker position={vessel.track.mapPosition}>\n            {this.renderPopup(vessel.track)}\n        </Marker>)\n    }\n\n    /**\n     * \n     * @param {*} track \n     * @param {*} key \n     */\n    renderVesseTrack(track, key) {\n        return (\n            <CircleMarker key={key} center={track.mapPosition} radius={5}>\n                {this.renderPopup(track)}\n            </CircleMarker>\n        )\n    }\n\n    /**\n     * Drow polyline\n     * @param {*} positions \n     */\n    renderVesselTrackCluster(positions) {\n        if (!positions || positions.length === 0) {\n            return;\n        }\n        // pass new instance of object\n        // positions prop are compared by reference, not by value\n        // https://github.com/PaulLeCam/react-leaflet/issues/504\n        const newPositions = [...positions];\n        return (\n            <Polyline color={\"white\"} positions={newPositions}></Polyline>\n        )\n    }\n\n    /**\n     * Main render function\n     */\n    render() {\n\n        const {\n            bounds,\n            zoom,\n            mapPosition,\n            showVesselMarker,\n            vesselCurrentTrack,\n            vessel,\n            showVesselTrackMarkers,\n            clusteringPositions,\n            vesselTracks } = this.state;\n\n        return (\n            <React.Fragment>\n\n                <Map\n                    bounds={bounds}\n                    duration={2} easeLinearity={0.25} animate={true} center={mapPosition} zoom={zoom}>\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n\n                    {/* Draw vessel marker last position*/}\n                    {showVesselMarker ? this.renderVesselInfo(vessel) : null}\n\n                    {/* Draw vessel track cluster */}\n                    {showVesselTrackMarkers ? this.renderVesselTrackCluster(clusteringPositions) : null}\n\n                    {/* Draw vessel track  */}\n                    {showVesselTrackMarkers ?\n                        vesselTracks.map((track, key) => this.renderVesseTrack(track, key)) : null}\n\n                    {/* Draw vessel Animation state  */}\n                    {vesselCurrentTrack ? (<CircleMarker color={'red'} center={vesselCurrentTrack} radius={10}></CircleMarker>) : null}\n                </Map>\n            </React.Fragment>\n        )\n    }\n}","import { API_ROOT, USE_MOCK_DATA } from './config.service';\n\n/**\n * DESCRIPTION: converting object with params to string  \n * @param {*} params \n */\nconst getParamsAsString = (params) => {\n    return Object.keys(params).map(function (key, value) {\n        return `${key}:${params[key]}`\n    }).join(\"/\");\n}\n\n\n/**\n * DESCRIPTION:Layer function to manipulate response \n */\nconst genericHttpCall = ({ apiEndpoint, apiKey }, params = {}) => {\n\n    let fetchOpt = {};\n\n    let fetchUrl = `${API_ROOT}/${apiEndpoint}/${apiKey}/${getParamsAsString(params)}`\n\n    //  Only for dev proposes\n    if (USE_MOCK_DATA) {\n        fetchUrl = `mocks/${apiEndpoint}.json`\n        console.log(`Mock is enabled fecting data from: ${fetchUrl}`)\n    }\n\n    return fetch(fetchUrl, fetchOpt)\n        .then(response => response.json())\n        .catch(error => error.json())\n        .then(response => {\n            if (response.errors) {\n                throw (response.errors);\n            }\n            return response\n        });\n\n}\n\nexport default genericHttpCall;","import { VesselTrackDto } from \"../dtos/vesselTrack.dto.model\";\n\nexport class VesselTrackModel extends VesselTrackDto {\n\n    mapPosition;\n    date;\n\n    constructor({ MMSI,\n        STATUS,\n        SPEED,\n        LON,\n        LAT,\n        COURSE,\n        HEADING,\n        TIMESTAMP,\n        SHIP_ID }) {\n        super();\n\n        this.mmsi = parseInt(MMSI);\n        this.status = parseInt(STATUS);\n        this.speed = parseInt(SPEED);\n        this.lon = parseFloat(LON);\n        this.lat = parseFloat(LAT);\n        this.course = parseInt(COURSE);\n        this.heading = parseInt(HEADING);\n        this.timestamp = TIMESTAMP;\n        this.shipId = parseInt(SHIP_ID);\n\n        this.date = new Date(this.timestamp);\n        this.mapPosition = [this.lat, this.lon];\n\n    }\n}","export class VesselTrackDto {\n    mmsi\n    status\n    speed\n    lon\n    lat\n    course\n    heading\n    timestamp\n    shipId\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst DELAY = 600;\n\n/**\n * Name: SearchBox\n * Description: Search box is responsible to handle input changes\n */\nclass SearchBox extends Component {\n\n    state = {\n        searchQuery: \"\"\n    }\n\n    timer;\n\n    componentWillUnmmount() {\n        clearTimeout(this.timer);\n    }\n\n    /**\n     * Handle on enter press\n     */\n    handleSubmit = (e) => {\n        e.preventDefault();\n        clearTimeout(this.timer);\n        this.notifyOnQueryChange();\n    }\n\n    /**\n     * handle on input change\n     */\n    handleOnChange = (e) => {\n        clearTimeout(this.timer);\n        this.setState({\n            searchQuery: e.target.value\n        }, () => this.timer = setTimeout(this.notifyOnQueryChange, DELAY))\n    }\n\n    /**\n     * Notify props\n     */\n    notifyOnQueryChange = () => {\n        this.props.onQueryChange(this.state.searchQuery);\n    }\n\n    /**\n     * Main render function\n     */\n    render() {\n        const { searchQuery } = this.state;\n        return (\n            <form onSubmit={this.handleSubmit}>\n\n                <input\n                    className=\"md-input search-box\"\n                    autoComplete=\"off\"\n                    placeholder=\"MMSI: ex. 239410300\"\n                    onChange={this.handleOnChange}\n                    type=\"text\"\n                    id=\"searchQuery\"\n                    value={searchQuery} />\n            </form>\n        )\n    }\n}\n\nSearchBox.propTypes = {\n    onQueryChange: PropTypes.func.isRequired\n}\n\nexport default SearchBox;","import React from 'react';\nimport './vesselInfoCard.component.style.scss';\nimport PropTypes from 'prop-types';\n\n/**\n * Name: VesselInfoCard\n * Description: VesselInfoCard component is represented vessel general info (dammy data)\n * TODO: add dynamicaly data\n * @param {*} props \n */\nconst VesselInfoCard = (props) => {\n\n    return (\n        <div>\n            <div className=\"navigator-card-header-image\"></div>\n            <div className=\"navigator-card-body\">\n                <div className=\"md-subtitle\">\n                    MMSI: {props.mmsi}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nVesselInfoCard.propTypes = {\n    mmsi: PropTypes.number\n}\n\nexport default VesselInfoCard;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Name: AnimationControlls\n * Description: AnimationControlls component is responsible for animation controll actions\n * @param {*} props \n */\n\nexport default class AnimationControlls extends Component {\n\n    state = {\n        statusPlaying: false\n    }\n\n    /**\n     * On click handling \n     */\n    playClicked = () => {\n        this.props.onPlayClick();\n        this.setState({ statusPlaying: true });\n    }\n\n    /**\n     * Render more animation actions (Pause Replay)\n     */\n    renderPauseReplay = () => {\n        const { onPauseClick, onReplayClick } = this.props;\n        return (\n            <React.Fragment>\n\n                <br />\n                <br />\n\n                <button className=\"md-button-primary md-button-round\" onClick={onPauseClick}>\n                    <img src=\"/images/pause-24px.svg\" alt=\"\" />\n                </button>\n                <button className=\"md-button-primary md-button-round\" onClick={onReplayClick}>\n                    <img src=\"/images/replay-24px.svg\" alt=\"\" />\n                </button>\n            </React.Fragment>\n        )\n    }\n\n    /**\n     * Main render component's function\n     */\n    render() {\n        const { statusPlaying } = this.state;\n        return (\n            <React.Fragment>\n                <button className=\"md-button-primary\"\n                    onClick={this.playClicked}>SHOW VESSELS TRACK</button>\n                {/* Render Pause Replay */}\n                {statusPlaying ? this.renderPauseReplay() : null}\n\n            </React.Fragment>\n        )\n    }\n}\n\nAnimationControlls.propTypes = {\n    onPauseClick: PropTypes.func.isRequired,\n    onPlayClick: PropTypes.func.isRequired,\n    onReplayClick: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport './linearLoader.component.style.scss'\n\n/**\n * NAME: LinearLoader\n * DESCRIPTION: Linear material loader \n * @param {*} props \n */\nconst LinearLoader = (props) => {\n    return (\n        <div className=\"load-bar\">\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n        </div>\n    )\n}\n\nexport default LinearLoader;","import React from 'react';\nimport './navigatorCard.component.style.scss';\nimport SearchBox from '../search-box/searchBox.component';\nimport VesselInfoCard from '../vessel-info-card/vesselInfoCard.component';\nimport AnimationControlls from '../animation-controlls/animationControlls.component';\nimport PropTypes from 'prop-types';\nimport LinearLoader from '../lineaar-loader/linearLoader.component';\n\n/**\n * Name: NavigatroCard\n * Description: NavigatroCard component is responsible vessel info and search\n * @param {*} props \n */\nconst NavigatroCard = (props) => {\n\n    /**\n     * Error Message\n     */\n    const renderErrorMessage = () => {\n        const { serverMessage } = props;\n        return (\n            <div className=\"md-error\">\n                ERROR: {serverMessage}\n            </div>\n        )\n    }\n\n    /**\n     * Loader\n     */\n    const renderLoader = () => {\n        return (\n            <LinearLoader></LinearLoader>\n        )\n    }\n\n    /**\n     * Rendering of vessel info & animation controlls\n     */\n    const renderVesselInfo = () => {\n        return (\n            <div className=\"navigator-card\">\n                <VesselInfoCard mmsi={props.mmsi}/>\n                <div className=\"navigator-card-body\">\n                    <AnimationControlls\n                        onPauseClick={props.onPauseClick}\n                        onPlayClick={props.onPlayClick}\n                        onReplayClick={props.onReplayClick}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    /**\n     * Main render component's function \n     */\n    return (\n        <div className=\"navigator-container\">\n\n            {/* Vessel track info card & animation controlls */}\n            {props.trackData ? renderVesselInfo() : null}\n\n            <div className=\"navigator-card\">\n                {/* Loader */}\n                {props.loading ? renderLoader() : null}\n                {/* Server Error */}\n                {props.serverError ? renderErrorMessage() : null}\n                {/* Search box */}\n                <SearchBox onQueryChange={props.onSearchQueryChange} />\n            </div>\n        </div>\n    )\n}\n\nNavigatroCard.propTypes = {\n    onSearchQueryChange: PropTypes.func.isRequired,\n    onPauseClick: PropTypes.func.isRequired,\n    onPlayClick: PropTypes.func.isRequired,\n    onReplayClick: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    serverError: PropTypes.bool.isRequired,\n    serverMessage: PropTypes.string.isRequired,\n    mmsi: PropTypes.number\n}\n\nexport default NavigatroCard;","import React, { Component } from 'react';\nimport MapContainer from '../../components/map-container/mapContainer.conponent'\nimport { exportVesselTrack } from '../../services/httpActions.service';\nimport NavigatorCard from '../../components/navigator-card/navigatorCard.component';\nimport { ANIMATION_STAUSES } from '../../services/config.service';\n\n/**\n * NAME: MainPage\n * DESCIPTION:  Component responsiple for the main page view. This componen listening events \n * (like search inputchange, play pause ) fetching and provide data to approprite components  \n * \n */\nclass MainPage extends Component {\n\n    state = {\n        mmsi: 0,\n        loading: false,\n        serverError: false,\n        serverMessage: \"\",\n        trackData: null,\n        animationStatus: ANIMATION_STAUSES.INITIAL\n    }\n\n    /**\n     * On Query change\n     */\n    handleOnQueryChange = (query) => {\n        if (query && !isNaN(query)) {\n            query = parseInt(query)\n            this.setState({ mmsi: query, trackData: null, loading: true })\n            this.fetchVesselData(query);\n        }\n    }\n\n    /**\n     * On pause click\n     */\n    handlePauseClick = () => {\n        this.setState({\n            animationStatus: ANIMATION_STAUSES.PAUSE\n        })\n    }\n\n    /**\n     * On play click\n     */\n    handlePlayClick = () => {\n        this.setState({\n            animationStatus: ANIMATION_STAUSES.PLAY\n        })\n    }\n\n    /**\n     * On replay click\n     */\n    handleReplayClick = () => {\n        this.setState({\n            animationStatus: ANIMATION_STAUSES.REPLAY\n        })\n    }\n\n    /**\n     * Fetch Vessel data\n     * @param {*} mmsi \n     */\n    fetchVesselData(mmsi) {\n        exportVesselTrack(mmsi).then((response) => {\n            this.setState({\n                trackData: response,\n                loading: false,\n                serverError: false,\n                animationStatus: ANIMATION_STAUSES.INITIAL\n            })\n        }).catch(errors => {\n            let errorMessage = \"Connection error\";\n            if (errors.length > 0) {\n                errorMessage = errors.map(error => error.detail).join(', ');\n            }\n            this.setState({\n                loading: false,\n                serverError: true,\n                serverMessage: errorMessage\n            });\n        })\n    }\n\n    /**\n     * Main render component function \n     */\n    render() {\n\n        const { mmsi,\n            trackData,\n            loading,\n            serverError,\n            animationStatus,\n            serverMessage } = this.state;\n\n        return (\n            <div className=\"md-page-container\">\n                <NavigatorCard\n                    mmsi={mmsi}\n                    loading={loading}\n                    serverError={serverError}\n                    serverMessage={serverMessage}\n                    trackData={trackData}\n                    onSearchQueryChange={this.handleOnQueryChange}\n                    onPauseClick={this.handlePauseClick}\n                    onPlayClick={this.handlePlayClick}\n                    onReplayClick={this.handleReplayClick}\n                />\n                <MapContainer\n                    animationStatus={animationStatus}\n                    trackData={trackData} mmsi={mmsi} />\n            </div>\n        )\n    }\n}\n\nexport default MainPage;","import genericHttpCall from './httpHelper.service';\nimport { API_ENDPOINTS, API_KEYS } from './config.service';\nimport { VesselTrackModel } from './models/vesselTrack.model';\nimport { ShipSearchModel } from './models/shipSearch.model';\n\n/**\n * DESCRIPTION: HTTP call for export vessel track\n * @param {*} mmsi \n */\nexport const exportVesselTrack = (mmsi) => {\n    return genericHttpCall(\n        {\n            apiEndpoint: API_ENDPOINTS.EXPORT_VESSEL_TRACK,\n            apiKey: API_KEYS.PS01\n        },\n        { v: 2, period: 'daily', days: 5, mmsi: mmsi, protocol: 'jsono' })\n        .then(response => response.map(vtrack => new VesselTrackModel(vtrack)))\n}\n\n/**\n * TODO: future implementation \n * @param {*} mmsi \n */\nexport const shipSearch = (mmsi) => {\n    return genericHttpCall(\n        {\n            apiEndpoint: API_ENDPOINTS.SHIP_SHEARCH,\n            apiKey: API_KEYS.VD03\n        },\n        { mmsi: mmsi, protocol: 'jsono' })\n        .then(response => response.map((sSearch) => new ShipSearchModel(sSearch)));\n}","import React from 'react';\nimport MainPage from './pages/main/main.page';\n\n/**\n * Main App component\n */\nfunction App() {\n  return (\n    <MainPage></MainPage>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}